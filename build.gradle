import java.text.SimpleDateFormat

plugins {
    id 'java'
    id "org.ajoberstar.grgit" version "4.1.0"

    /**
     * Gradle Versions Plugin
     * usage: './gradlew dependencyUpdates'
     * see https://github.com/ben-manes/gradle-versions-plugin#gradle-versions-plugin
     *
     * all version numbers are handled on 'ext' section
     */
    id "com.github.ben-manes.versions" version "0.36.0"
}

group 'com.biotrics'
version '1.0'


compileJava.options.encoding = 'UTF-8'

allprojects {
    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://www.jitpack.io" }
    }
}

dependencies {

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnitPlatform()
}

task createVersionTxt {
    doLast {
        new File(projectDir, "src/main/resources/autogenerated").mkdirs()
        new File(projectDir, "src/main/resources/autogenerated/version.txt").text = """Version: $version
Revision: ${grgit.head().abbreviatedId}
Buildtime: ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}
"""
    }
}

task copyChangeTxt(type: Copy) {
    from '../change.txt'
    into "./src/main/resources/autogenerated"
}

classes {
    dependsOn createVersionTxt
    dependsOn copyChangeTxt
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.biotrics.pcoll.Main'
    }
//    archiveClassifier = "all"
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

task deployfatJar(type: Copy, dependsOn: fatJar) {
    String strFrom = "./build/libs/Serializable-" + "$project.version" + ".jar"
    String strTo = "./setup/WIN-InnoSetup/setup_resources"

    println 'Copy from:'
    println strFrom
    println 'to:'
    println strTo

    from strFrom
    into strTo
    rename { String fileName ->
        // a simple way is to remove the "-$version" from the jar filename
        // but you can customize the filename replacement rule as you wish.
        fileName.replace("-$project.version", "")
    }
}

// exclude duplicate files from FatJar, but include version.txt for all libraries!
tasks.withType(Jar) {
    eachFile {
        name = it.name
        if (name != "version.txt") {
            it.duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }
    }
}